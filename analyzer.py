Iimport base64

code_base64 = b'''
aW1wb3J0IG9zCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgcmUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlCgpvcy5zeXN0ZW0oJ2NsZWFyJykKCiMgQU5TSSBlc2NhcGUgY29kZXMgZm9yIGNvbG9ycwpHUkVFTiA9ICJcMDMzWzkybSIKQ1lBTiA9ICJcMDMzWzk2bSIKQkxBQ0sgPSAiXDAzM1szMG0iClJFU0VUID0gIlwwMzNbMG0iClJFRCA9ICJcMDMzWzMxbSIKV0hJVEUgPSAiXDAzM1szN20iCgojIEFTQ0lJIEJhbm5lcgpCQU5ORVIgPSBmIiIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICB7Q1lBTn3ilpHilpLilpPilojilpPilpLilpEgIOKWkeKWkuKWk+KWiOKWiOKWiOKWiOKWiOKWiOKWk+KWkiAgICDilpHilpLilpPilojilojilojilojilojilojilpPilpLilpEgIAogICAgICAgICAgICAgIOKWkuKWk+KWiOKWk+KWkiAg4paR4paS4paT4paI4paT4paS4paR4paR4paS4paT4paI4paT4paSICDilpHilpLilpPilojilpPilpLilpHilpHilpLilpPilojilpPilpLilpEgCiAgICAgICAgICAgICAg4paS4paT4paI4paT4paSIOKWkeKWkuKWk+KWiOKWk+KWkuKWkSAgICAgICAgIOKWkeKWkuKWk+KWiOKWk+KWkuKWkSAgICAgICAgCiAgICAgICAgICAgICAg4paS4paT4paI4paT4paSIOKWkeKWkuKWk+KWiOKWk+KWkuKWkSAgICAgICAgIOKWkeKWkuKWk+KWiOKWk+KWkuKWkSAgICAgICAgCiAgICAgICAgICAgICB7V0hJVEV9IOKWkuKWk+KWiOKWk+KWkiDilpHilpLilpPilojilpPilpLilpEgICAgICAgICDilpHilpLilpPilojilpPilpLilpEgICAgICAgIAogICAgICAgICAgICAgIOKWkuKWk+KWiOKWk+KWkiAg4paR4paS4paT4paI4paT4paS4paR4paR4paS4paT4paI4paT4paSICDilpHilpLilpPilojilpPilpLilpHilpHilpLilpPilojilpPilpLilpEgCiAgICAgICAgICAgICDilpHilpLilpPilojilpPilpLilpEgIOKWkeKWkuKWk+KWiOKWiOKWiOKWiOKWiOKWiOKWk+KWkiAgICDilpHilpLilpPilojilojilojilojilojilojilpPilpLilpEgIAogICAgICAgICAgICAgIHtHUkVFTn1VUkwgJiBSRVBPU0lUT1JZIEFOQUxZWkVSIGJ5e1dISVRFfSAtIHtSRUR9SUNDCntSRVNFVH0KIiIiCiMgUGF0dGVybnMgdG8gYXZvaWQgaW4gY29kZSBhbmFseXNpcwpTVVNQSUNJT1VTX1BBVFRFUk5TID0gWwogICAgcidpbXBvcnRccysob3N8c3VicHJvY2Vzc3xzb2NrZXR8cmVxdWVzdHMpJywgICMgU3VzcGljaW91cyBpbXBvcnRzCiAgICByJyg/aSkocmVxdWVzdHNcLmdldHxyZXF1ZXN0c1wucG9zdHxzb2NrZXRcLmNvbm5lY3QpJywgICMgTmV0d29yayBhY3Rpdml0eQogICAgcicoP2kpKG9wZW5cKC4rP1wudHh0fG9wZW5cKC4rP1wuanNvbnxvcGVuXCguKz9cLmNzdiknLCAgIyBGaWxlIG1hbmlwdWxhdGlvbgogICAgcidldmFsXCgnLCAgIyBVc2Ugb2YgZXZhbAogICAgcidleGVjXCgnLCAgIyBVc2Ugb2YgZXhlYwogICAgcicoP2kpKGJhc2U2NFwuYjY0ZGVjb2RlfHBpY2tsZVwubG9hZCknLCAgIyBQb3RlbnRpYWxseSBkYW5nZXJvdXMgZnVuY3Rpb25zCiAgICByJyg/aSkoaW5wdXRcKC4rP1wuc2VuZHxpbnB1dFwoLis/XC5wb3N0KScsICAjIFNlbmRpbmcgdXNlciBpbnB1dCB0byBhIHNlcnZlcgogICAgcicoP2kpKGRvY3VtZW50XC5jb29raWV8bG9jYWxTdG9yYWdlXC5zZXRJdGVtKScsICAjIEFjY2Vzc2luZyBjb29raWVzIG9yIGxvY2FsIHN0b3JhZ2UKICAgIHInKD9pKShmZXRjaFwoLis/XC50aGVufGF4aW9zXC5wb3N0fGF4aW9zXC5nZXQpJywgICMgRmV0Y2hpbmcgZGF0YSBmcm9tIGEgc2VydmVyCiAgICByJyg/aSkod2luZG93XC5sb2NhdGlvbnx3aW5kb3dcLm9wZW4pJywgICMgUmVkaXJlY3RpbmcgdXNlcnMKXQoKIyBDb21tb24gcGhpc2hpbmcgaW5kaWNhdG9ycwpQSElTSElOR19JTkRJQ0FUT1JTID0gWwogICAgcid3d3dcLlx3K1wuY29tXC5mYWtlXC5jb20nLCAgIyBVbnVzdWFsIFVSTCBzdHJ1Y3R1cmUKICAgIHInd3d3XC5cdytcLmNvbScsICAjIEdlbmVyaWMgZG9tYWluIG5hbWVzCiAgICByJ2xvZ2luJywgICMgUHJlc2VuY2Ugb2YgJ2xvZ2luJyBpbiB0aGUgVVJMCiAgICByJ3VyZ2VudCcsICAjIFByZXNlbmNlIG9mICd1cmdlbnQnIGluIHRoZSBVUkwKICAgIHInYWNjb3VudCcsICAjIFByZXNlbmNlIG9mICdhY2NvdW50JyBpbiB0aGUgVVJMCl0KCmRlZiBhbmFseXplX3VybCh1cmwpOgogICAgdHJ5OgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICMgQ2hlY2sgaWYgbG9naW4gaXMgcmVxdWlyZWQKICAgICAgICAgICAgaWYgImxvZ2luIiBpbiByZXNwb25zZS51cmw6CiAgICAgICAgICAgICAgICBwcmludCgiQ2F1dGlvbjogVGhpcyBVUkwgcmVxdWlyZXMgbG9naW4uXG5QbGVhc2UgZG8gYSBiYWNrZ3JvdW5kIGNoZWNrIGJlZm9yZSBsb2dnaW5nIGluLiIpCiAgICAgICAgICAgICMgQ2hlY2sgZm9yIHBoaXNoaW5nIGluZGljYXRvcnMKICAgICAgICAgICAgaWYgY2hlY2tfZm9yX3BoaXNoaW5nX2luZGljYXRvcnModXJsKToKICAgICAgICAgICAgICAgIHByaW50KCJDYXV0aW9uOiBUaGlzIFVSTCBtYXkgYmUgc3VzcGljaW91cyBmb3IgcGhpc2hpbmcgYWN0aXZpdGllcy4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIlRoZSBVUkwgYXBwZWFycyB0byBiZSBzYWZlLiIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoZiJFcnJvcjoge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSBmb3IgVVJMOiB7dXJsfSIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKCmRlZiBhbmFseXplX2dpdGh1Yl9yZXBvKHJlcG9fdXJsKToKICAgIHRyeToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChyZXBvX3VybCkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICMgQW5hbHl6ZSB0aGUgY29udGVudCBvZiB0aGUgcmVwb3NpdG9yeQogICAgICAgICAgICBwcmludCgiQW5hbHl6aW5nIEdpdEh1YiByZXBvc2l0b3J5Li4uIikKICAgICAgICAgICAgIyBDaGVjayBmb3Igc3VzcGljaW91cyBwYXR0ZXJucyBpbiB0aGUgY29kZQogICAgICAgICAgICBpZiBjaGVja19mb3Jfc3VzcGljaW91c19jb2RlKHJlc3BvbnNlLnRleHQpOgogICAgICAgICAgICAgICAgcHJpbnQoIkNhdXRpb246IFRoZSByZXBvc2l0b3J5IGNvbnRhaW5zIHN1c3BpY2lvdXMgY29kZSBwYXR0ZXJucy4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIlRoZSByZXBvc2l0b3J5IGFwcGVhcnMgdG8gYmUgc2FmZS4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYiNDA0IENsaWVudCBFcnJvcjogTm90IEZvdW5kIGZvciB1cmw6IHtyZXBvX3VybH0iKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpCgpkZWYgY2hlY2tfZm9yX3N1c3BpY2lvdXNfY29kZShjb2RlKToKICAgIGZvciBwYXR0ZXJuIGluIFNVU1BJQ0lPVVNfUEFUVEVSTlM6CiAgICAgICAgaWYgcmUuc2VhcmNoKHBhdHRlcm4sIGNvZGUpOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgcmV0dXJuIEZhbHNlCgpkZWYgY2hlY2tfZm9yX3BoaXNoaW5nX2luZGljYXRvcnModXJsKToKICAgIGZvciBwYXR0ZXJuIGluIFBISVNISU5HX0lORElDQVRPUlM6CiAgICAgICAgaWYgcmUuc2VhcmNoKHBhdHRlcm4sIHVybCk6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICByZXR1cm4gRmFsc2UKCmRlZiBtYWluKCk6CiAgICBwcmludChCQU5ORVIpICAjIERpc3BsYXkgdGhlIEFTQ0lJIGJhbm5lcgogICAgY2hvaWNlID0gaW5wdXQoIkRvIHlvdSB3YW50IHRvIGFuYWx5emUgYSBVUkwgb3IgYSBHaXRIdWIgcmVwb3NpdG9yeT9cbihFbnRlciAndXJsJyBvciAncmVwbycpOiAiKS5zdHJpcCgpLmxvd2VyKCkKICAgIAogICAgaWYgY2hvaWNlID09ICd1cmwnOgogICAgICAgIHByaW50KGYiUGxlYXNlIGVudGVyIHRoZSBVUkwgdG8gYW5hbHl6ZTogIikKICAgICAgICB1cmwgPSBpbnB1dCgiICAg4pWw4pSAPiAiKQogICAgICAgIGFuYWx5emVfdXJsKHVybCkKICAgIAogICAgZWxpZiBjaG9pY2UgPT0gJ3JlcG8nOgogICAgICAgIHByaW50KGYiUGxlYXNlIGVudGVyIHRoZSBzcGVjaWZpYyBHaXRIdWIgcmVwb3NpdG9yeSBsaW5rXG4oZS5nLiwgaHR0cHM6Ly9naXRodWIuY29tL3VzZXJuYW1lL3JlcG8tbmFtZS9ibG9iL21hc3Rlci9maWxlX25hbWUpOiAiKQogICAgICAgIHJlcG9fdXJsID0gaW5wdXQoIiAgIOKVsOKUgD4gIikKICAgICAgICBhbmFseXplX2dpdGh1Yl9yZXBvKHJlcG9fdXJsKQogICAgCiAgICBlbHNlOgogICAgICAgIHByaW50KCIgICDilIDilIA+SW52YWxpZCBjaG9pY2UuIFBsZWFzZSBlbnRlciAndXJsJyBvciAncmVwbycuIikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkKICAgICAgICAgIA==
'''

decoded_code = base64.b64decode(code_base64).decode('utf-8')
exec(decoded_code)

